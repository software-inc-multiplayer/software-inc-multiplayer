// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: authResponse.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Multiplayer.Packets {

  /// <summary>Holder for reflection information generated from authResponse.proto</summary>
  public static partial class AuthResponseReflection {

    #region Descriptor
    /// <summary>File descriptor for authResponse.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AuthResponseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJhdXRoUmVzcG9uc2UucHJvdG8SE011bHRpcGxheWVyLlBhY2tldHMaEG1v",
            "ZGVyYXRpb24ucHJvdG8ihgEKDEF1dGhSZXNwb25zZRIvCgRUeXBlGAEgASgO",
            "MiEuTXVsdGlwbGF5ZXIuUGFja2V0cy5SZXNwb25zZVR5cGUSOQoHQmFuSW5m",
            "bxgCIAEoCzIjLk11bHRpcGxheWVyLlBhY2tldHMuQmFuSW5mb3JtYXRpb25I",
            "AIgBAUIKCghfQmFuSW5mbyotCgxSZXNwb25zZVR5cGUSCAoER09PRBAAEgcK",
            "A0JBRBABEgoKBkJBTk5FRBACYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Multiplayer.Packets.ModerationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Multiplayer.Packets.ResponseType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Multiplayer.Packets.AuthResponse), global::Multiplayer.Packets.AuthResponse.Parser, new[]{ "Type", "BanInfo" }, new[]{ "BanInfo" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ResponseType {
    [pbr::OriginalName("GOOD")] Good = 0,
    [pbr::OriginalName("BAD")] Bad = 1,
    [pbr::OriginalName("BANNED")] Banned = 2,
  }

  #endregion

  #region Messages
  public sealed partial class AuthResponse : pb::IMessage<AuthResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AuthResponse> _parser = new pb::MessageParser<AuthResponse>(() => new AuthResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AuthResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Multiplayer.Packets.AuthResponseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AuthResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AuthResponse(AuthResponse other) : this() {
      type_ = other.type_;
      banInfo_ = other.banInfo_ != null ? other.banInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AuthResponse Clone() {
      return new AuthResponse(this);
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Multiplayer.Packets.ResponseType type_ = global::Multiplayer.Packets.ResponseType.Good;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Multiplayer.Packets.ResponseType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "BanInfo" field.</summary>
    public const int BanInfoFieldNumber = 2;
    private global::Multiplayer.Packets.BanInformation banInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Multiplayer.Packets.BanInformation BanInfo {
      get { return banInfo_; }
      set {
        banInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AuthResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AuthResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(BanInfo, other.BanInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::Multiplayer.Packets.ResponseType.Good) hash ^= Type.GetHashCode();
      if (banInfo_ != null) hash ^= BanInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Type != global::Multiplayer.Packets.ResponseType.Good) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (banInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BanInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Type != global::Multiplayer.Packets.ResponseType.Good) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (banInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BanInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::Multiplayer.Packets.ResponseType.Good) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (banInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BanInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AuthResponse other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Multiplayer.Packets.ResponseType.Good) {
        Type = other.Type;
      }
      if (other.banInfo_ != null) {
        if (banInfo_ == null) {
          BanInfo = new global::Multiplayer.Packets.BanInformation();
        }
        BanInfo.MergeFrom(other.BanInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Multiplayer.Packets.ResponseType) input.ReadEnum();
            break;
          }
          case 18: {
            if (banInfo_ == null) {
              BanInfo = new global::Multiplayer.Packets.BanInformation();
            }
            input.ReadMessage(BanInfo);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = (global::Multiplayer.Packets.ResponseType) input.ReadEnum();
            break;
          }
          case 18: {
            if (banInfo_ == null) {
              BanInfo = new global::Multiplayer.Packets.BanInformation();
            }
            input.ReadMessage(BanInfo);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
